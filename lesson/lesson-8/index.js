// ----------------------------Task-1--------------------------------------------------

// Даны 2 лифта (с именами "left" и "right") в здании с 3 этажами (пронумерованными от 0 до 2), напишите функцию elevator, принимающую 3 аргумента (по порядку):

// left - Текущий этаж левого лифта
// right - Текущий этаж правого лифта
// call - Этаж, с которого был вызван лифт.
// Она должна возвращать название лифта, ближайшего к вызванному этажу ("left"/"right").

// В случае, когда оба лифта находятся на одинаковом расстоянии от вызываемого этажа, выбирается лифт "right".

// Можно предположить, что на входе всегда будут находиться действительные целые числа в диапазоне 0-2.

// elevator(0, 1, 0); // => "left"0
// elevator(0, 1, 1); // => "right"
// elevator(0, 1, 2); // => "right"
// elevator(0, 0, 0); // => "right"
// elevator(0, 2, 1); // => "right"

// Решение Задания Варинт 1
// Инфа про "Math.abs"   https://code.mu/ru/javascript/manual/math/Math.abs/
console.log(`Task-1
`)

function elevator(left, right, call) {
  return Math.abs(left - call) < Math.abs(right - call) ? 'left' : 'right'
}

console.log(elevator(0, 1, 0));
console.log(elevator(0, 1, 1));
console.log(elevator(0, 1, 2));
console.log(elevator(0, 0, 0));
console.log(elevator(0, 2, 1));



// ----------------------------Task-2--------------------------------------------------

// В Великобритании вновь появились волки. Вы - фермер, занимающийся разведением овец, и теперь на вас нападают волки, которые притворяются овцами. К счастью, вы умеете их распознавать.
// Предупредите овцу, стоящую перед волком, о том, что ее собираются съесть. Помните, что вы стоите в начале очереди, которая находится в конце массива:

// [sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]  <-- НАЧАЛО ОЧЕРЕДИ ЗДЕСЬ!!! 
//  7      6      5      4      3            2      1

// Если волк является ближайшим к вам животным, верните ему сообщение "Pls go away and stop eating my sheep". В противном случае возвращается сообщение "Oi! Sheep number ${N}! You are about to be eaten by a wolf!", где ${N} - позиция овцы в очереди.

// Примечание: в массиве всегда будет ровно один волк.

// Примеры:

// Вход: queu = ["sheep", "sheep", "sheep", "wolf", "sheep"]
// Выходные данные: "Oi! Sheep number 1! You are about to be eaten by a wolf!"

// Вход: queu = ["sheep", "sheep", "wolf"]
// Выходные данные: "Pls go away and stop eating my sheep"
console.log(`
Task-2
`)

function warnTheSheep(queue) {
  if (queue[queue.length - 1] === "wolf") {
    return 'Pls go away and stop eating my sheep'
  } else {
    return `Oi! Sheep number ${queue.reverse().indexOf("wolf")}! You are about to be eaten by a wolf!`
  }
}

console.log(warnTheSheep(["sheep", "sheep", "sheep", "sheep", "wolf"]))

// ----------------------------Task-2--------------------------------------------------

// В массиве целых чисел найдите то, которое встречается в нем нечетное число раз.

// Всегда найдется только одно целое число, которое встречается нечетное количество раз.

// Примеры:
// [7] должно вернуть 7, так как оно встречается 1 раз (что нечетно).
// [0] должно возвращать 0, так как встречается 1 раз (что нечетно).
// [1,1,2] должно возвращать 2, так как встречается 1 раз (что нечетно).
// [0,1,0,1,0] должно возвращать 0, так как встречается 3 раза (что нечетно).
// [1,2,2,3,3,3,4,3,3,3,2,2,1] должно вернуть 4, так как оно встречается 1 раз (что нечетно).

function findOdd(A) {
  return A.reduce((a, b) => a ^ b);
}

console.log(findOdd([7]))
console.log(findOdd([0]))
console.log(findOdd([1,1,2]))
console.log(findOdd([0,1,0,1,0]))
console.log(findOdd([1,2,2,3,3,3,4,3,3,3,2,2,1]))